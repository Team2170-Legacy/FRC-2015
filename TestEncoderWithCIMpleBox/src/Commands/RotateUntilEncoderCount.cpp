// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RotateUntilEncoderCount.h"
#include "Math.h"						// 2170 code - For fmin function

RotateUntilEncoderCount::RotateUntilEncoderCount() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	// 2170 code
	iterations=0;
	encoderStopCount=0.0;
	motorSpeed=0.0;
	rampUpSeconds=0.0;
}

// Called just before this Command runs the first time
void RotateUntilEncoderCount::Initialize() {
	// 2170 code
	// Get test parameters from SmartDashboad
	encoderStopCount = SmartDashboard::GetNumber("Encoder Stop Count");
	motorSpeed = SmartDashboard::GetNumber("Motor Speed");
	rampUpSeconds = SmartDashboard::GetNumber("Ramp Up Seconds");
	rampUpSeconds = fmax(rampUpSeconds, .00001); // Protect against user selects ramp up time of zero
	iterations=0;

	//	encoderStopCount=250;
	//	motorSpeed=0.1;
	//	rampUpSeconds=0.50;

	Robot::elevator->Init();
	Robot::elevator->SetSpeed(0.0);
//	Robot::elevator->SetSpeed(motorSpeed);
//	Robot::elevator->SetSpeed(SmartDashboard::GetNumber("Motor Speed"));
	SmartDashboard::PutNumber("Encoder Distance", Robot::elevator->GetDistance());
//	SmartDashboard::PutNumber("Encoder Distance", 0.0);
}

// Called repeatedly when this Command is scheduled to run
void RotateUntilEncoderCount::Execute() {
	// 2170 code
	Robot::elevator->SetSpeed(fmin(motorSpeed, motorSpeed * TimeSinceInitialized() / rampUpSeconds));
//	Robot::elevator->SetSpeed(motorSpeed);
	SmartDashboard::PutNumber("Encoder Distance", Robot::elevator->GetDistance());
	SmartDashboard::PutNumber("Execute Time", TimeSinceInitialized());
	SmartDashboard::PutNumber("Execute Iteration Count", iterations++);
	SmartDashboard::PutNumber("Average Millisecond Cycle Rate", TimeSinceInitialized() / iterations * 1000);
}

// Make this return true when this Command no longer needs to run execute()
bool RotateUntilEncoderCount::IsFinished() {
	// 2170 code
	return Robot::elevator->GetDistance() > encoderStopCount;
//	return Robot::elevator->GetDistance() > SmartDashboard::GetNumber("Encoder Stop");
//	return false;
}

// Called once after isFinished returns true
void RotateUntilEncoderCount::End() {
	// 2170 code
	SmartDashboard::PutNumber("Encoder Distance", Robot::elevator->GetDistance());
	SmartDashboard::PutNumber("Execute Time", TimeSinceInitialized());
	SmartDashboard::PutNumber("Execute Iteration Count", iterations++);
	SmartDashboard::PutNumber("Average Millisecond Cycle Rate", TimeSinceInitialized() / iterations * 1000);
	Robot::elevator->SetSpeed(0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RotateUntilEncoderCount::Interrupted() {
	// 2170 code
	End();
}
