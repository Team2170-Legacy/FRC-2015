// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <iostream>

#include "Chassis.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveWithJoysticks.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Chassis::Chassis() : Subsystem("Chassis")
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftMotor = RobotMap::chassisLeftMotor;
	rightMotor = RobotMap::chassisRightMotor;
	driveMotors = RobotMap::chassisDriveMotors;
	yawGyro = RobotMap::chassisYawGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Chassis::InitDefaultCommand()
{
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Chassis::SendJoystickYAxesValuesToMotors(float left, float right)
{
	// Take the passed left and right parameters and send them to the TankDrive method
	driveMotors->TankDrive(left, right);
}

void Chassis::StopMotors(void)
{
	// Send zero to the driveMotors controller for both left and right .i.e. stop the motors
	driveMotors->StopMotor();
}

void Chassis::DriveStraight()
{
	// Drive chassis straight for specified time
	float ChassisAngle = ReadChassisYaw();
	//std::cout << "ChassisAngle: " << ChassisAngle << " : Product: " << mYawGain * ChassisAngle << std::endl;
	driveMotors->Drive(mAutoVelocity, mYawGain * ChassisAngle);
}

void Chassis::TurnClockwise()
{
	// Rotate chassis by specified degrees
	std::cout << "Velocity:" << mAutoVelocity << " Rotation Velocity: " << mAutoRotatationVelocity << std::endl;
	driveMotors->Drive(mAutoVelocity, mAutoRotatationVelocity);

}
void Chassis::TurnCounterclockwise()
{
	// Rotate chassis by specified degrees
	std::cout << "Velocity:" << mAutoVelocity << " Rotation Velocity: " << -1 * mAutoRotatationVelocity << std::endl;
	driveMotors->Drive(mAutoVelocity, -1 * mAutoRotatationVelocity);
}

void Chassis::ResetChassisYaw()
{
	//Resets gyro to 0
	yawGyro->Reset();
}

float Chassis::ReadChassisYaw()
{
	//Finds angle of robot's turn
	return yawGyro->GetAngle();
}

void Chassis::CalibrateChassis(){
	//Perform any one time chassis related calibrations
	yawGyro->InitGyro();
}
