// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Arm.h"
#include "../RobotMap.h"
#include "../Commands/ArmOpenClose.h"
#include "DoubleSolenoid.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Arm::Arm() : Subsystem("Arm") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	doubleSolenoid = RobotMap::armDoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Arm::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Arm::ArmOpen(DoubleSolenoid::Value kForward) {
	if (!isOpen()) {
			doubleSolenoid->Set(kForward);
	}
}

	void Arm::ArmClose(DoubleSolenoid::Value kReverse){
		if (isOpen()== true){
		doubleSolenoid->Set(kReverse);
		}
	}
bool Arm::isOpen() {
		//doubleSolenoid->Get();
		return doubleSolenoid->Get();
}

// Assume kForward (forward channel enabled) means Arm is open. In other words
//	kForward is returned by Get() when arm is open; to open arm use set(kForward)
// is the assumption is wrong, change the kForwards
void Arm::Open() {
	doubleSolenoid->Set(DoubleSolenoid::kForward);

}

	void Arm::Close() {
	doubleSolenoid->Set(DoubleSolenoid::kReverse);

}

void Arm::Reverse() {

	switch(doubleSolenoid->Get())

	{
		case DoubleSolenoid::kOff:
				Close();
				break;
		case DoubleSolenoid::kForward:
			Close();
			break;
		case DoubleSolenoid::kReverse:
			Open();
			break;
	}
}



