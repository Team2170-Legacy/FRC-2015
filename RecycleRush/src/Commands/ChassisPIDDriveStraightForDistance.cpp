// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ChassisPIDDriveStraightForDistance.h"

#define DRIVE_P 0.1f
#define DRIVE_I 0.0f
#define DRIVE_D 0.0f

#define SET_WAIT_COUNT 2

ChassisPIDDriveStraightForDistance::ChassisPIDDriveStraightForDistance() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void ChassisPIDDriveStraightForDistance::Initialize() {
	Robot::chassis->ResetChassisDistance();

	distance = new SimplePIDOutput();
	drive = new PIDController(DRIVE_P, DRIVE_I, DRIVE_D, Robot::chassis->chassisEncoder, distance);
	drive->SetContinuous(false);
	drive->SetAbsoluteTolerance(2.0);
	drive->Enable();

	OnTargetCount = 0;
}

// Called repeatedly when this Command is scheduled to run
void ChassisPIDDriveStraightForDistance::Execute() {
	Robot::chassis->DriveStraight(distance->getValue());
}

// Make this return true when this Command no longer needs to run execute()
bool ChassisPIDDriveStraightForDistance::IsFinished() {
	if (drive->OnTarget()) {
		OnTargetCount++;
	}
	else {
		OnTargetCount = 0;
	}
	return (OnTargetCount > SET_WAIT_COUNT);
}

// Called once after isFinished returns true
void ChassisPIDDriveStraightForDistance::End() {
	drive->Disable();
	delete drive;
	delete distance;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ChassisPIDDriveStraightForDistance::Interrupted() {

}

ChassisPIDDriveStraightForDistance::ChassisPIDDriveStraightForDistance(
		double distance) {
	Requires(Robot::chassis);
	mDistance = distance;
}
