// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ElevatorGotoPosition.h"

ElevatorGotoPosition::ElevatorGotoPosition() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

ElevatorGotoPosition::ElevatorGotoPosition(double TargetPosition) {
	Requires(Robot::elevator);

	Robot::elevator->SetTargetLevel(TargetPosition);
}

// Called just before this Command runs the first time
void ElevatorGotoPosition::Initialize() {
	if (Robot::elevator->isAboveTarget()) {
		Robot::elevator->Start(-.1);
	}else{
		Robot::elevator->Start(+.1);
	}
}

// Called repeatedly when this Command is scheduled to run
void ElevatorGotoPosition::Execute() {
	if (Robot::elevator->GetSpeed() < 0) {
		Robot::elevator->RampCombined(-.1, 1.0, 0.30);
		Robot::elevator->SmartDashboardOutputs();
	}else{
		Robot::elevator->RampCombined(+.1, 1.0, 0.30);
		Robot::elevator->SmartDashboardOutputs();
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ElevatorGotoPosition::IsFinished() {
	if (Robot::elevator->GetSpeed() < 0) {
		return (Robot::elevator->isBelowTarget() || Robot::elevator->GetLowerSafety());
	}else{
		return (Robot::elevator->isAboveTarget() || Robot::elevator->GetUpperSafety() );
	}
}

// Called once after isFinished returns true
void ElevatorGotoPosition::End() {
	Robot::elevator->Stop();
	Robot::elevator->SmartDashboardOutputs();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ElevatorGotoPosition::Interrupted() {
	End();
}
