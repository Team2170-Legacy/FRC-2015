// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ChassisRotate.h"
#include <iostream>

ChassisRotate::ChassisRotate() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

ChassisRotate::ChassisRotate(float NewAngle, bool Correction)
{
	Requires(Robot::chassis);

	mPassedAngle = NewAngle;
	mRotateAngle = NewAngle;
	bCorrection = Correction;
}

// Called just before this Command runs the first time
void ChassisRotate::Initialize() {
	Command::SetTimeout(4.0);

	Robot::chassis->driveMotors->SetSafetyEnabled(false);

	if (bCorrection)
	{
		mRotateAngle = mPassedAngle - Robot::chassis->ReadChassisYaw();
	}

	Robot::chassis->ResetChassisYaw();
}

// Called repeatedly when this Command is scheduled to run
void ChassisRotate::Execute() {
	float RemainingAngle = mRotateAngle - Robot::chassis->ReadChassisYaw();

	if ((fabs(RemainingAngle) < 25.0 || bCorrection) && (mDownshiftCounter == 0))
	{
		Robot::chassis->setCurrentAutoMagnitude(Robot::chassis->getCurrentAutoMagnitude() / 2.0);
		mDownshiftCounter++;
	}

	if (mRotateAngle > 0.0)
	{
		Robot::chassis->TurnClockwise();
	}
	else if (mRotateAngle < 0.0)
	{
		Robot::chassis->TurnCounterclockwise();
	}
	else
	{
		End();
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ChassisRotate::IsFinished() {
	float CurrentAngle = Robot::chassis->ReadChassisYaw();
	bool rval = false;

	if (fabs(CurrentAngle) >= fabs(mRotateAngle))
	{
		rval = true;
	}
	else if (Command::IsTimedOut())
	{
		rval = true;
	}

	return rval;
}

// Called once after isFinished returns true
void ChassisRotate::End() {
	Robot::chassis->StopMotors();
	mDownshiftCounter = 0;
	std::cout << "Current Yaw: " << Robot::chassis->ReadChassisYaw() << std::endl;

	Robot::chassis->driveMotors->SetSafetyEnabled(true);

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ChassisRotate::Interrupted() {

}
