// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ChassisDriveStraightForDistanceAccelDecel.h"

#define COAST_DISTANCE 10.0F

ChassisDriveStraightForDistanceAccelDecel::ChassisDriveStraightForDistanceAccelDecel() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void ChassisDriveStraightForDistanceAccelDecel::Initialize() {
	if (bResetGyro) {
		Robot::chassis->ResetChassisYaw();
	}
	Robot::chassis->ResetChassisDistance();
}

// Called repeatedly when this Command is scheduled to run
void ChassisDriveStraightForDistanceAccelDecel::Execute() {
	 if (TimeSinceInitialized() < mAccelTime) {
		// Linear Accelerate based on time since started
		Robot::chassis->DriveStraight(float( mMagnitude *  TimeSinceInitialized() / fabs(mAccelTime) ));
	}
	else if (fabs(Robot::chassis->ReadChassisDistance()) > fabs(mDistance) - fabs(mDecelDistance)) {
		// Linear Decelerate based on remaining distance
		Robot::chassis->DriveStraight(float( mMagnitude *  (fabs(mDistance) - fabs(Robot::chassis->ReadChassisDistance()) ) / fabs(mDecelDistance) ));
	}
	else{
		// Full requested speed
		Robot::chassis->DriveStraight(mMagnitude);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ChassisDriveStraightForDistanceAccelDecel::IsFinished() {
	return (fabs(Robot::chassis->ReadChassisDistance()) >= fabs(mDistance));
}

// Called once after isFinished returns true
void ChassisDriveStraightForDistanceAccelDecel::End() {
	Robot::chassis->StopMotors();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ChassisDriveStraightForDistanceAccelDecel::Interrupted() {

}

ChassisDriveStraightForDistanceAccelDecel::ChassisDriveStraightForDistanceAccelDecel(double distance,
		float magnitude, bool reset,
		float accel, float decel) {
	Requires(Robot::chassis);
	mDistance = distance;
	mMagnitude = magnitude;
	mCoastMagnitude = magnitude;
	bResetGyro = reset;
	mAccelTime = accel;
	mDecelDistance = decel;
}
