	// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArmCalibrate.h"
#include "Commands/ArmClose.h"
#include "Commands/ArmOpen.h"
#include "Commands/ArmOpenClose.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/AutonomousDriveToScore.h"
#include "Commands/AutonomousPickupAndScore.h"
#include "Commands/ChassisCalibrate.h"
#include "Commands/ChassisDriveStraightForTime.h"
#include "Commands/ChassisRotate.h"
#include "Commands/DriveWithJoysticks.h"
#include "Commands/ElevatorAutoZero.h"
#include "Commands/ElevatorDownOne.h"
#include "Commands/ElevatorFeederPickup.h"
#include "Commands/ElevatorFeederStage.h"
#include "Commands/ElevatorFloorPickup.h"
#include "Commands/ElevatorFloorStage.h"
#include "Commands/ElevatorGotoPosition.h"
#include "Commands/ElevatorManual.h"
#include "Commands/ElevatorPIDDownOne.h"
#include "Commands/ElevatorPIDUpOne.h"
#include "Commands/ElevatorPlatformPlace.h"
#include "Commands/ElevatorPlatformStage.h"
#include "Commands/ElevatorUpOne.h"
#include "Commands/IntakeCalibrate.h"
#include "Commands/IntakeIn.h"
#include "Commands/IntakeOpenClose.h"
#include "Commands/RotateWithBumpersLeft.h"
#include "Commands/RotateWithBumpersRight.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.
	//COMMENTED OUT UNTIL DRIVE TEAM MAKES TANK DRIVE SENSITIVITY CODE
	//SmartDashboard::PutNumber("DrivingSensitivity", .5);

	// Create SD key fields here!!  Not at the END !!!
	SmartDashboard::PutNumber("ChassisDriveStraightForTimeInput", 2);

	SmartDashboard::PutNumber("ChassisRotateAngleInput", 90);

	// All defaults below are theoretical and should be replaced by real world tuning of encoder positions using manual joystick positioning
	SmartDashboard:: PutNumber("ElevatorFeederTop",    3.5*654);           // 3.5 totes to allow for feeder diagonal tote slide-in
	SmartDashboard:: PutNumber("ElevatorFeederBot",    2.0*654 - 2.0*54);  // 2.0 totes minus roughly 2   inches to get fingers below tote lips
	SmartDashboard:: PutNumber("ElevatorFloorTop",     2.0*654 + 2.0*54);  // 2.0 totes plus  roughly 2   inches for inter-tote clearance
	SmartDashboard:: PutNumber("ElevatorFloorBot",     1.0*654 - 2.0*54);  // 1.0 tote  minus roughly 2   inches to get fingers below tote lips
	SmartDashboard:: PutNumber("ElevatorPlatformTop",  1.0*654 + 3.0*54);  // 1.0 tote  plus  roughly 3   inches to clear 2" platform
	SmartDashboard:: PutNumber("ElevatorPlatformBot",  1.0*654 + 1.5*54);  // 1.0 tote  plus  roughly 1.5 inches to have stack land on 2" platform

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	joystickDriverOnPort2 = new Joystick(2);
	
	joystick2Button3 = new JoystickButton(joystickDriverOnPort2, 3);
	joystick2Button3->WhileHeld(new IntakeIn());
	joystick2Button1 = new JoystickButton(joystickDriverOnPort2, 1);
	joystick2Button1->WhenPressed(new IntakeOpenClose());
	joystickGunnerOnPort1 = new Joystick(1);
	
	joystickButton5 = new JoystickButton(joystickGunnerOnPort1, 5);
	joystickButton5->WhenPressed(new ElevatorManual());
	joystickButton3 = new JoystickButton(joystickGunnerOnPort1, 3);
	joystickButton3->WhenPressed(new ElevatorUpOne());
	joystickButton2 = new JoystickButton(joystickGunnerOnPort1, 2);
	joystickButton2->WhenPressed(new ElevatorDownOne());
	joystickButton1 = new JoystickButton(joystickGunnerOnPort1, 1);
	joystickButton1->WhenPressed(new ArmOpenClose());
	joystickDriverOnPort0 = new Joystick(0);
	
	joystickRightBumper = new JoystickButton(joystickDriverOnPort0, 6);
	joystickRightBumper->WhenPressed(new RotateWithBumpersRight());
	joystickLeftBumper = new JoystickButton(joystickDriverOnPort0, 5);
	joystickLeftBumper->WhenPressed(new RotateWithBumpersLeft());
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("ChassisCalibrate", new ChassisCalibrate());

	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	SmartDashboard::PutData("AutonomousDriveToScore", new AutonomousDriveToScore());

	SmartDashboard::PutData("AutonomousPickupAndScore", new AutonomousPickupAndScore());

	SmartDashboard::PutData("DriveWithJoysticks", new DriveWithJoysticks());

	SmartDashboard::PutData("RotateWithBumpersLeft", new RotateWithBumpersLeft());

	SmartDashboard::PutData("RotateWithBumpersRight", new RotateWithBumpersRight());

	SmartDashboard::PutData("ChassisDriveStraightForTime", new ChassisDriveStraightForTime());

	SmartDashboard::PutData("ChassisRotate", new ChassisRotate());

	SmartDashboard::PutData("ElevatorGotoPosition", new ElevatorGotoPosition());

	SmartDashboard::PutData("ElevatorFeederStage", new ElevatorFeederStage());

	SmartDashboard::PutData("ElevatorFeederPickup", new ElevatorFeederPickup());

	SmartDashboard::PutData("ElevatorFloorStage", new ElevatorFloorStage());

	SmartDashboard::PutData("ElevatorFloorPickup", new ElevatorFloorPickup());

	SmartDashboard::PutData("ElevatorPlatformStage", new ElevatorPlatformStage());

	SmartDashboard::PutData("ElevatorPlatformPlace", new ElevatorPlatformPlace());

	SmartDashboard::PutData("ElevatorUpOne", new ElevatorUpOne());

	SmartDashboard::PutData("ElevatorDownOne", new ElevatorDownOne());

	SmartDashboard::PutData("ElevatorAutoZero", new ElevatorAutoZero());

	SmartDashboard::PutData("ElevatorManual", new ElevatorManual());

	SmartDashboard::PutData("ArmCalibrate", new ArmCalibrate());

	SmartDashboard::PutData("ArmOpenClose", new ArmOpenClose());

	SmartDashboard::PutData("ArmOpen", new ArmOpen());

	SmartDashboard::PutData("ArmClose", new ArmClose());

	SmartDashboard::PutData("IntakeCalibrate", new IntakeCalibrate());

	SmartDashboard::PutData("IntakeIn", new IntakeIn());

	SmartDashboard::PutData("IntakeOpenClose", new IntakeOpenClose());

	SmartDashboard::PutData("ElevatorPIDUpOne", new ElevatorPIDUpOne());

	SmartDashboard::PutData("ElevatorPIDDownOne", new ElevatorPIDDownOne());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	SmartDashboard:: PutNumber("distanceBetweenLevels", 654);

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getJoystickDriverOnPort2() {
	return joystickDriverOnPort2;
}

Joystick* OI::getJoystickGunnerOnPort1() {
	return joystickGunnerOnPort1;
}

Joystick* OI::getJoystickDriverOnPort0() {
	return joystickDriverOnPort0;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
